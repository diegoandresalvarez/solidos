/* Coeficiente de Poisson y constante de Lamé */
nu     : E/(2*G) - 1$
lambda : (nu*E)/((1 + nu)*(1 - 2*nu))$

/* Se considera un vector de fuerzas másicas nulo */
b = [0, 0, 0]$

/* Definimos los operadores básicos del cálculo vectorial: */
/* Laplaciano de un campo escalar en coordenadas cilíndricas, ec. (*\eqref{eq:laplacianocilin}*) */
lapl(f) := (1/r)*diff(r*diff(f,r),r) + (1/(r^2))*diff(f,t,2) + diff(f,z,2)$

/* Laplaciano vectorial en coordenadas cilíndricas, ecuación (*\eqref{eq:lapl_vec_cil}*) */
lapl_vec(v) := [ lapl(v[1]) - v[1]/(r^2) - (2/(r^2))*diff(v[2],t),
                 lapl(v[2]) - v[2]/(r^2) + (2/(r^2))*diff(v[1],t),
                 lapl(v[3]) ]$

/* Gradiente de un campo escalar en coordenadas cilíndricas, ec. (*\eqref{eq:gradientcilin}*) */
grad(f) := [ diff(f,r), (1/r)*diff(f,t), diff(f,z) ]$

/* Divergencia de un campo vectorial en coordenadas cilíndricas, ec. (*\eqref{eq:divcilin}*) */
div(v) := (1/r)*diff(r*v[1],r) + (1/r)*diff(v[2],t) + diff(v[3],z)$

/* Se define el vector de Galerkin en coordenadas cilíndricas */
depends(phi, [r, t, z])$
p : [ 0, 0, phi ]$

/* Campo vectorial de desplazamientos con el vector de Galerkin, ec. (*\eqref{eq:u_vec_galerkin_p2}*) */
vec_u : (2*(1 - nu)*lapl_vec(p) - grad(div(p)))/(2*G)$
[ur, vt, w] : vec_u$ /* se desempaquetan los componentes del vector vec_u */

/* Los desplazamientos deben ser igual a las ecuaciones (*\eqref{eq:urvtw_Galerkin}*) */
ur2 : -diff(phi, r, 1, z, 1)/(2*G)$
vt2 : -diff(phi, t, 1, z, 1)/(2*G*r)$
w2  :  (2*(1 - nu)*lapl(phi) - diff(phi, z, 2))/(2*G)$

/* Se verifica la equivalencia de las expresiones; imprime [0,0,0] */
[ur-ur2, vt-vt2, w-w2];

/* Se calculan las deformaciones, ecuaciones (*\eqref{eq:deformacion_coord_cilind}*) */
er : diff(ur,r)$                  grt : (1/r)*diff(ur,t) + diff(vt,r) - vt/r$
et : ur/r + (1/r)*diff(vt,t)$     grz : diff(w,r) + diff(ur,z)$
ez : diff(w,z)$                   gtz : diff(vt,z) + (1/r)*diff(w,t)$

/* Las deformaciones deben ser igual a las ecuaciones (*\eqref{eq:def_Love_cil}*) */
er2  : -(1/(2*G))*diff(phi, r,2, z,1)$
et2  : -(1/(2*G))*diff((1/r)*diff(phi, r) + (1/r^2)*diff(phi, t,2), z)$
ez2  :  (1/(2*G))*diff(2*(1 - nu)*lapl(phi) - diff(phi, z,2), z)$
grt2 : -(1/G)*diff(phi/r, r,1, t,1, z,1)$
grz2 :  (1/G)*diff((1 - nu)*lapl(phi) - diff(phi, z,2), r)$
gtz2 :  (1/(G*r))*diff((1 - nu)*lapl(phi) - diff(phi, z,2), t)$

/* Se verifica la equivalencia de las expresiones; imprime [0,0,0,0,0,0] */
factor([ er-er2, et-et2, ez-ez2, grt-grt2, grz-grz2, gtz-gtz2 ]);

/* Se calcula la dilatación cúbica, ecuación (*\eqref{eq:e_coord_cil}*) */
e : er + et + ez$

/* La dilatación cúbica debe ser igual a la ecuación (*\eqref{eq:dilcub_Love_cil}*) */
e2 : (1/(2*G))*diff((1 - 2*nu)*lapl(phi),z)$

/* Se verifica la equivalencia de las expresiones; imprime 0 */
factor(e - e2);

/* Se calculan los esfuerzos con las ecuaciones de Lamé, ecuaciones (*\eqref{eq:Lame_en_cilindricas}*) */
sr  : lambda*e + 2*G*er$          trt : G*grt$
st  : lambda*e + 2*G*et$          ttz : G*gtz$
sz  : lambda*e + 2*G*ez$          trz : G*grz$

/* Los esfuerzos deben ser igual a las ecuaciones (*\eqref{eq:esf_Love_cil}*) */
sr2  :  diff(nu*lapl(phi) - diff(phi, r,2), z)$
st2  :  diff(nu*lapl(phi) - (1/r)*diff(phi,r) - (1/r^2)*diff(phi, t,2), z)$
sz2  :  diff((2 - nu)*lapl(phi) - diff(phi, z,2), z)$
trt2 : -diff(phi/r, r,1, t,1, z,1)$
trz2 :  diff((1 - nu)*lapl(phi) - diff(phi, z,2), r)$
ttz2 :  (1/r)*diff((1 - nu)*lapl(phi) - diff(phi, z,2), t)$

/* Se verifica la equivalencia de las expresiones; imprime [0,0,0,0,0,0] */
factor([ sr-sr2, st-st2, sz-sz2, trt-trt2, trz-trz2, ttz-ttz2 ]);
